version: "3.8"

services:
  ######################################
  # MinIO S3-Compatible Service
  ######################################
  s3minio:
    image: "quay.io/minio/minio:latest"
    network_mode: "host"
    hostname: "s3minio"
    container_name: "s3minio"
    env_file: # Change this to your own .env file
      - "configs/minio.env" # Copy minio.env to minio_custom.env and fill in the values
    volumes:
      - "./data:/data:rw"
    command: >
      server /data
      --console-address ":9001"
      --anonymous --json --quiet
      --certs-dir /root/.minio/certs
    # This ensures the Rust app does not start
    # before MinIO is ready (simple dependency).
    healthcheck:
      test: ["CMD", "curl", "-f", "127.0.0.1:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ######################################
  # Recording Playback Javascript API Service
  ######################################
  recording-playback-server:
    network_mode: "host"
    hostname: "recording-playback-server"
    # image: docker.io/groovybits/mpegts_to_s3:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENABLE_DEBUG: "false"
    cap_add:
      - NET_RAW
      - NET_ADMIN
      - SYS_ADMIN
      - BPF
    privileged: true
    container_name: "recording-playback-server"
    env_file: # Change this to your own .env file
      - "./recording-playback-server/.env.example" # Copy .env.example to .env and fill in the values
    volumes:
      - "./hls:/app/recording-playback-server/hls:rw"
    depends_on:
      - s3minio
    restart: unless-stopped
    entrypoint: ["/app/entrypoint_recording-playback-server.sh"]


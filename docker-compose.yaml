version: "3.8"

services:
  ######################################
  # MinIO S3-Compatible Service
  ######################################
  s3minio:
    image: "quay.io/minio/minio:latest"
    container_name: "s3minio"
    env_file:
      - "config.env"
    environment:
      # Map environment variables to MinIO's required env vars
      MINIO_ROOT_USER: "${S3_USERNAME}"
      MINIO_ROOT_PASSWORD: "${S3_PASSWORD}"
      MINIO_REGION_NAME: "${S3_REGION}"
      MINIO_DOMAIN: "${MINIO_DOMAIN}"
      MINIO_SERVER_URL: "${MINIO_SERVER_URL}"
      MINIO_BROWSER_REDIRECT_URL: "${MINIO_BROWSER_REDIRECT_URL}"

    # Bind to localhost:9000 and localhost:9001
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"

    volumes:
      - "${DATA_DIR}:/data"
      - "${CERTS_DIR}:/root/.minio/certs"

    command: >
      server /data
      --console-address ":9001"
      --anonymous --json --quiet
      --certs-dir /root/.minio/certs

    # This ensures the Rust app does not start
    # before MinIO is ready (simple dependency).
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9001/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ######################################
  # Rust-Based Capture & HLS Service
  ######################################
  rust_capture:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "rust_capture"
    env_file:
      - "config.env"

    # Mount local 'hls' directory as the working directory
    # where the application will write its files.
    volumes:
      - "./hls:/app/hls"

    working_dir: "/app/hls"

    command: >
      /app/mpeg_to_s3
      -n ${NETWORK_INTERFACE}
      -i ${UDP_IP}
      -p ${UDP_PORT}
      -o ts
      --diskless_mode

    depends_on:
      - s3minio
    restart: unless-stopped


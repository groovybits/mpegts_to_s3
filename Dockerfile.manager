###
### START OF Runtime Container
FROM almalinux:8-minimal as binary

ARG ENABLE_DEBUG
ENV ENABLE_DEBUG=${ENABLE_DEBUG:-false}

## Add the built binaries to the PATH
ENV PATH="/app/bin:${PATH}"

## Set up environment variables
ENV HOURLY_URLS_LOG="/app/hls/index.txt"
ENV SWAGGER_FILE="/app/swagger_manager.yaml"
ENV NVM_DIR="/app/.nvm"

## Update system and install dependencies needed for nvm and node
RUN microdnf update -y > /dev/null && \
    microdnf install -y findutils curl tar gzip

## Install nvm and use it to install Node.js 20, then symlink the node binaries for runtime
RUN mkdir -p ${NVM_DIR} && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash && \
    bash -c "source \$NVM_DIR/nvm.sh && \
    nvm install 20 && \
    nvm alias default 20 && \
    nvm use default && \
    mkdir -p /app/bin && \
    ln -sf \$(nvm which default) /app/bin/node && \
    ln -sf \$(dirname \$(nvm which default))/npm /app/bin/npm && \
    ln -sf \$(dirname \$(nvm which default))/npx /app/bin/npx"

## Quick confirmation that the binaries execute correctly
RUN node --version
RUN npm --version

COPY scripts/entrypoint_manager.sh /app/entrypoint_manager.sh
COPY recording-playback-server/swagger_manager.yaml ${SWAGGER_FILE}

COPY recording-playback-server/package.json /app/package.json
COPY recording-playback-server/package-lock.json /package-lock.json
COPY recording-playback-server/manager.js /app/manager.js
COPY recording-playback-server/S3Database.js /app/S3Database.js
COPY recording-playback-server/config.js /app/config.js

WORKDIR /app

## Install recording-playback-server dependencies
RUN npm install

## Finished building the runtime container

# Make directory for eBPF program binary
RUN rm -rf /usr/share/*
RUN rm -rf /usr/libexec/*
RUN ldconfig 2> /dev/null

## Clean up and save space
RUN rm -rf /var/cache/* && \
        rm -rf /usr/lib*/lib*.a && \
        rm -rf /usr/lib*/lib*.la && \
        rm -rf /usr/lib/.build-id;

RUN microdnf clean all > /dev/null && rm -rf /var/cache/yum

# remove unnecessary files
RUN cd /usr/bin && \
    rm -f addgnupghome agetty alias ambiguous_words arch aserver awk \
        b2sum base32 base64 bashbug* bg brotli bunzip2 busctl bzcat \
        bzcmp bzdiff bzegrep bzfgrep bzgrep bzip2* bzless bzmore \
        ca-legacy cairo-sphinx cal captoinfo catchsegv cd chacl \
        chage chcon chgrp chmem chmod chown chrt cksum clear cmp \
        cntraining col colcrt colrm column combine_* comm coredumpctl \
        csplit curl cut date dawg2wordlist db_* dbus-* dd debuginfod-find \
        df diff* dir* dmesg dnf-3 du dumpiso \
        fc* fgrep fincore fmt fold fribidi g13 gawk gdbm* gdbus gencat \
        getconf getent getfacl getopt getopts gio* glib* glx* \
        gpasswd gpg* gr2fonttest grep grpc_* gst-* gunzip gzexe gzip \
        head hexdump hostid i386 iconv id info* ionice ipc* join journalctl \
        last* ld.so ldd libinput* libwacom* link linux* look lstmeval \
        lstmtraining make* mc* md5sum merge* mftraining modulemd* more mount* \
        namei newgid* newgrp newuid* nice nl nohup nproc nsenter numfmt od \
        openssl orc* pango* paste pathchk pinky pldd pr printenv printf \
        protoc ptx pwd* python* raw read* realpath rename resolvectl \
        runcon script* sdiff sed sendiso seq set_unicharset setarch && \
    cd /usr/sbin && rm -f * && \
    # Remove development files and libraries
    rm -rf /usr/lib/debug/* \
           /usr/lib/games/* \
           /usr/lib/fontconfig/* \
           /usr/lib/environment.d/* \
           /usr/include/* \
           /usr/lib64/gcc-* \
           /usr/lib64/cmake/* \
           /usr/lib64/X11/* \
           /usr/lib64/libQt5* \
           /usr/lib64/gconv/* \
           /usr/lib/.build-id/* \
           /usr/lib64/.build-id/* && \
    # Remove documentation, locale, and other non-essential data
    rm -rf /usr/share/doc/* \
           /usr/share/info/* \
           /usr/share/man/* \
           /usr/share/gnupg/* \
           /usr/share/i18n/* \
           /usr/share/backgrounds/* \
           /usr/share/icons/* \
           /usr/share/fonts/* \
           /usr/share/cracklib/* \
           /usr/share/applications/* \
           /usr/share/locale/* \
           /usr/share/X11/* && \
    # Remove package management and temp files
    rm -rf /var/cache/* \
           /var/log/* \
           /tmp/* \
           /var/tmp/* && \
    # Remove non-essential system files
    rm -rf /usr/games \
           /usr/local/share/* \
           /usr/local/man/* \
           /usr/local/doc/* && \
    # Final cleanup
    microdnf clean all && \
    rm -rf /var/cache/dnf && \
    rm -rf /var/lib/rpm

# Library Cleanup - preserve only needed libraries
RUN cd /usr/lib && \
    rm -rf binfmt.d environment.d debug fontconfig games && \
    cd /usr/lib64 && \
    rm -f libasound* libpulse* libjack* libsndfile* \
        libicu* libsqlite* libgirepository* \
        libgphoto* libgpm* libgusb* libmagic* \
        libmozjs* libwrap* libxslt* libgst* && \
    rm -rf /usr/lib/.build-id/* \
           /usr/lib64/.build-id/* \
           /usr/lib64/gstreamer-1.0/*
